Registers

Name(s)  Num(s)   Callee Save    Meaning
$ze      0        N/A            Always zero (0)
$at      1        No             Assembler temporary
$v0-$v1  2-3      No             Return values
$a0-$a5  4-8      No             Function arguments 1-5
$s0-$s9  9-18     Yes            Saved Temporaries 1-10
$t0-$t9  19-28    No             Temporaries 1-10
$sp      29       Yes            Stack pointer
$fp      30       Yes            Frame pointer
$ra      31       N/A            Return address

Data Types

#Null-terminated character string
string "Hello world";

#1-byte value (or character)
byte 123;
#2-byte value
half 12345;
#4-byte value
word 12345678;

#Arrays (of 1-, 2-, or 4- byte values)
array byte {1, 2, 3, 'h', 'i'};

Instruction Types
R - Register
6     5    5    5    5    6
OOOOOOAAAAABBBBBCCCCCSSSSSFFFFFF
op    r1   r2   r3   sh   fn

I - Immediate
6     5    5    16
OOOOOOAAAAABBBBBIIIIIIIIIIIIIIII
op    r1   r2   imm

J - Jump
6     26
OOOOOOIIIIIIIIIIIIIIIIIIIIIIIIII
op    addr

Name  Args           Meaning              Code
add   r1, r2, r3     r1 = r2+r3           00 r1 r2 r3 -- 00
sub   r1, r2, r3     r1 = r2-r3           00 r1 r2 r3 -- 01
mul   r1, r2         {HI,LO} = r1*r2      00 r1 r2 -- -- 02
div   r1, r2         LO=r1/r2, HI=r1%r2   00 r1 r2 -- -- 03

and   r1, r2, r3     r1 = r2&r3           00 r1 r2 -- -- 04
or    r1, r2, r3     r1 = r2|r3           00 r1 r2 -- -- 05
xor   r1, r2, r3     r1 = r2^r3           00 r1 r2 -- -- 06
nor   r1, r2, r3     r1 = ~(r2|r3)        00 r1 r2 -- -- 07

slt   r1, r2, r3     r1 = r2 < r3         00 r1 r2 r3 -- 08

sll   r1, r2, sh     r1 = r2<<sh          00 r1 r2 -- sh 09
srl   r1, r2, sh     r1 = r2>>sh          00 r1 r2 -- sh 0A
sra   r1, r2, sh     r1 = r2>>sh          00 r1 r2 -- sh 0B

sllv  r1, r2, r3     r1 = r2<<r3          00 r1 r2 r3 -- 0C
srlv  r1, r2, r3     r1 = r2>>r3          00 r1 r2 r3 -- 0D
srav  r1, r2, r3     r1 = r2>>r3          00 r1 r2 r3 -- 0E

mfh   r1             r1 = HI              00 r1 -- -- -- 0F
mfl   r1             r1 = LO              00 r1 -- -- -- 10

jr    r1             PC = r1              00 r1 -- -- -- 11
jral  r1             $ra = PC, PC = r1    00 r1 -- -- -- 12

put   r1             putc(r1)             00 r1 -- -- -- 13
get   r1             r1 = getc()          00 r1 -- -- -- 14

exit                 exit program         00 -- -- -- -- 15


Name  Args           Meaning              Code
addi  r1, r2, imm    r1 = r2+imm          01 r1 r2 imm
subi  r1, r2, imm    r1 = r2-imm          02 r1 r2 imm
muli  r1, imm        {HI,LO} = r1*imm     03 r1 -- imm
divi  r1, imm        LO=r1/imm, HI=r1%imm 04 r1 -- imm

andi  r1, r2, imm    r1 = r2&imm          05 r1 r2 imm
ori   r1, r2, imm    r1 = r2|imm          06 r1 r2 imm
xori  r1, r2, imm    r1 = r2^imm          07 r1 r2 imm
nori  r1, r2, imm    r1 = ~(r2|imm)       08 r1 r2 imm

slti  r1, r2, imm    r1 = r2 < imm        09 r1 r2 imm

lw    r1, r2, imm    r1 = mem[r2+imm]     0A r1 r2 imm
lh    r1, r2, imm    r1 = mem[r2+imm]     0B r1 r2 imm
lb    r1, r2, imm    r1 = mem[r2+imm]     0C r1 r2 imm

sw    r1, r2, imm    mem[r2+imm] = r1     0D r1 r2 imm
sh    r1, r2, imm    mem[r2+imm] = r1     0E r1 r2 imm
sb    r1, r2, imm    mem[r2+imm] = r1     0F r1 r2 imm

beq   r1, r2, imm    if (r1==r2) pc+=imm  10 r1 r2 imm
bne   r1, r2, imm    if (r1!=r2) pc+=imm  11 r1 r2 imm
bgt   r1, r2, imm    if (r1> r2) pc+=imm  12 r1 r2 imm
bge   r1, r2, imm    if (r1>=r2) pc+=imm  13 r1 r2 imm
blt   r1, r2, imm    if (r1< r2) pc+=imm  14 r1 r2 imm
ble   r1, r2, imm    if (r1<=r2) pc+=imm  15 r1 r2 imm

puti  imm            putc(imm)            16 -- -- imm

j     addr           PC = addr            38 addr
jal   addr           $ra = PC, PC = addr  39 addr
